services:
  # Main Flask application
  web:
    build: .
    ports:
      - "8088:8088"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=false
      - SECRET_KEY=docker-dev-secret-key-change-in-production
      - DATABASE_URL=postgresql://ranch_user:ranch_password@db:5432/ranch_alerts
      - HOST=0.0.0.0
      - PORT=8088
      # Firebase configuration (update with your values)
      - FIREBASE_API_KEY=${FIREBASE_API_KEY:-AIzaSyCWIvA2I6kzqokVpq5gjGlMj03Gp3Hwe3E}
      - FIREBASE_AUTH_DOMAIN=${FIREBASE_AUTH_DOMAIN:-dmr-fns.firebaseapp.com}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID:-dmr-fns}
      - FIREBASE_STORAGE_BUCKET=${FIREBASE_STORAGE_BUCKET:-dmr-fns.firebasestorage.app}
      - FIREBASE_MESSAGING_SENDER_ID=${FIREBASE_MESSAGING_SENDER_ID:-668810466125}
      - FIREBASE_APP_ID=${FIREBASE_APP_ID:-1:668810466125:web:aeb977be6046bc45d3dd04}
      - FIREBASE_VAPID_KEY=${FIREBASE_VAPID_KEY:-BMQhfotmIce_250TfjNABeg-l_OPWwe2ghk_BwKL0pmyPVVyEsCiaAHniErBw8pw7RJnMp9kD5oU3DDG1Tlod2k}
      - FIREBASE_KEY_PATH=firebase-key.json
    env_file:
      - .env
    volumes:
      # Mount source code for development (comment out for production)
      - .:/app
      # Mount persistent storage for SQLite (if using SQLite instead of PostgreSQL)
      - app_data:/app/data
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - ranch_network

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=ranch_alerts
      - POSTGRES_USER=ranch_user
      - POSTGRES_PASSWORD=ranch_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - ranch_network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - ranch_network

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - ranch_network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  app_data:

networks:
  ranch_network:
    driver: bridge
